package edu.vuum.mocca;

import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.logging.Logger;

/**
 * @class SimpleSemaphore
 * 
 * @brief This class provides a simple counting semaphore implementation using
 *        Java a ReentrantLock and a ConditionObject. It must implement both
 *        "Fair" and "NonFair" semaphore semantics, just liked Java Semaphores.
 */
public class SimpleSemaphore {
	
	 private static Logger LOGGER = Logger.getLogger("InfoLogging");
    /**
     * Define a ReentrantLock to protect the critical section.
     */
    // TODO - you fill in here
	private ReentrantLock m_lock ;

    /**
     * Define a ConditionObject to wait while the number of
     * permits is 0.
     */
    // TODO - you fill in here
	private Condition m_condition;

    /**
     * Define a count of the number of available permits.
     */
    // TODO - you fill in here.  Make sure that this data member will
    // ensure its values aren't cached by multiple Threads..
	private volatile int m_permits;
	private int m_permitsMax;
	
    public SimpleSemaphore(int permits, boolean fair) {
        // TODO - you fill in here to initialize the SimpleSemaphore,
        // making sure to allow both fair and non-fair Semaphore
        // semantics.
    	m_lock = new ReentrantLock(fair);
    	m_condition = m_lock.newCondition();
    	m_permits = permits;
    	m_permitsMax = permits;
    }

    /**
     * Acquire one permit from the semaphore in a manner that can be
     * interrupted.
     */
    public void acquire() throws InterruptedException {
        // TODO - you fill in here.
    	m_lock.lockInterruptibly();
    	try
    	{
    		while(m_permits == 0) {
    			m_condition.await();
    		}
    		m_permits--;
    	} finally {
    		m_lock.unlock();
    	}
    }

    /**
     * Acquire one permit from the semaphore in a manner that cannot be
     * interrupted.
     */
    public void acquireUninterruptibly() {
        // TODO - you fill in here.
     	m_lock.lock();
    	try
    	{
    		while(m_permits == 0) {
    			m_condition.awaitUninterruptibly();
    		}
    		m_permits--;
    	} finally {
    		m_lock.unlock();
    	}    	
    }

    /**
     * Return one permit to the semaphore.
     */
    void release() {
        // TODO - you fill in here.
    	m_lock.lock();
    	try
    	{
    		if(m_permits < m_permitsMax)
    		{
    			m_permits++;
    		}
    		LOGGER.info("Release " + m_permits);
    		m_condition.signal();
    	} finally {
    		m_lock.unlock();
    	}    	
    }

    /**
     * Return the number of permits available.
     */
    public int availablePermits() {
        // TODO - you fill in here by changing null to the appropriate
        // return value.
    	m_lock.lock();
    	try
    	{
    		LOGGER.info("availablePermits " + m_permits);
    		return m_permits;
    	} finally {
    		m_lock.unlock();
    	}    	
    }
}
