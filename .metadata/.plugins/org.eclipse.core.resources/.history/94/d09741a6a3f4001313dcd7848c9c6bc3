package edu.vuum.mocca;

import java.util.HashMap;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;

/**
 * @class SimpleSemaphore
 *
 * @brief This class provides a simple counting semaphore
 *        implementation using Java a ReentrantLock and a
 *        ConditionObject.  It must implement both "Fair" and
 *        "NonFair" semaphore semantics, just liked Java Semaphores. 
 */
public class SimpleSemaphore {

    /**
     * Constructor initialize the data members.  
     */
    public SimpleSemaphore (int permits,
                            boolean fair)
    { 
    	
        // TODO - you fill in here
    	availPermits = permits;
        l = new ReentrantLock(fair);
        notLocked = l.newCondition();
 
    }

    /**
     * Acquire one permit from the semaphore in a manner that can
     * be interrupted.
     */
    public void acquire() throws InterruptedException {
        //TODO - you fill in here
        l.lockInterruptibly();
        try {
            while ((availPermits== 0)) {
                notLocked.await();
            }
            --availPermits;

        } finally {
            l.unlock();
        }
    }

    /**
     * Acquire one permit from the semaphore in a manner that
     * cannot be interrupted.
     */
    public void acquireUninterruptibly() {
        // TODO - you fill in here
        l.lock();
        try {
            while ((availPermits == 0)) {
                notLocked.awaitUninterruptibly();
            }
            --availPermits;

        } finally {
            l.unlock();
        }
    }


	/**
     * Return one permit to the semaphore.
     */
    void release() {
        // TODO - you fill in here
        l.lock();
        try {
            ++availPermits;



             notLocked.signal();

        } finally {
            l.unlock();
        }
    }
    
    /**
     * Return the number of permits available.
     */
    public int availablePermits(){
    	// TODO you fill in here
    	return availPermits; // You will change this value. 
    }
    
    /**
     * Define a ReentrantLock to protect the critical section.
     */
    // TODO - you fill in here
    final Lock l;

    /**
     * Define a ConditionObject to wait while the number of
     * permits is 0.
     */
    // TODO - you fill in here
    final Condition notLocked;
     
    /**
     * Define a count of the number of available permits.
     */
    // TODO - you fill in here
    int availPermits = 0;

}

